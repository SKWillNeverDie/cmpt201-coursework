#define _GNU_SOURCE
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define BUF_SIZE 256
void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len;

  if (data_size == sizeof(uint64_t)) {
    len = snprintf(buf, BUF_SIZE, format, *(uint64_t *)data);
  } else {
    len = snprintf(buf, BUF_SIZE, format, *(void **)data);
  }
  write(STDOUT_FILENO, buf, len);
}

struct header {
  uint64_t size;
  struct header *next;
};

int main() {
  int *block_start = sbrk(256);
  struct header *block1 = (struct header *)block_start;
  struct header *block2 = (struct header *)((char*)block_start + 128);
  block1->next = NULL;
  block2->next = block1;
  print_out("first block: %p\n", block1, sizeof(block1));
  print_out("second blocK: %p\n", block2, sizeof(block2));
  print_out("first block size: %d\n", &block1->size, sizeof(block1->size));
  print_out("first block next: %p\n", block1->next, sizeof(block1->next));
  print_out("second block size: %d\n", &block2->size, sizeof(block2->size));
  print_out("second block next: %p\n", block2->next, sizeof(block2->next));
  return 0;
}
